{
	"info": {
		"_postman_id": "8ae0a803-84e5-450a-a9f8-3d14f1d9be78",
		"name": "Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "878eabfa-ea6f-477f-88c4-aba2cd58d6c6",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response.token)\r",
							"pm.collectionVariables.set(\"token\", response.token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c9c9e7cf-0aee-4d2e-a9e7-0a33d303e3c9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"{{username}}\",\n    \"password\" : \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/auth"
			},
			"response": []
		},
		{
			"name": "GetAllBookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cd7a887-549c-491b-89f6-291f0f5127c0",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4. Schema Validation \r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"//SET TOTAL COUNT\r",
							"console.log(response.length)\r",
							"const totalCountBeforeBooking = response.length;\r",
							"pm.collectionVariables.set(\"totalCountBeforeBooking\", totalCountBeforeBooking)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "20eff09d-51ca-4c9d-873e-ff26570d1a76",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/booking"
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67c015cb-60ed-432c-8c94-96d1a82588f5",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.booking.firstname;\r",
							"var lastname = response.booking.lastname;\r",
							"var totalprice = response.booking.totalprice;\r",
							"var depositpaid = response.booking.depositpaid;\r",
							"var checkin = response.booking.bookingdates.checkin;\r",
							"var checkout = response.booking.bookingdates.checkout;\r",
							"var additionalneeds = response.booking.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 201\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is Created\", function () {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"title\": \"Generated schema for Root\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"        },\r",
							"        \"booking\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"firstname\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"lastname\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"totalprice\": {\r",
							"            \"type\": \"number\"\r",
							"            },\r",
							"            \"depositpaid\": {\r",
							"            \"type\": \"boolean\"\r",
							"            },\r",
							"            \"bookingdates\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"checkin\": {\r",
							"                \"type\": \"string\"\r",
							"                },\r",
							"                \"checkout\": {\r",
							"                \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"checkin\",\r",
							"                \"checkout\"\r",
							"            ]\r",
							"            },\r",
							"            \"additionalneeds\": {\r",
							"            \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"firstname\",\r",
							"            \"lastname\",\r",
							"            \"totalprice\",\r",
							"            \"depositpaid\",\r",
							"            \"bookingdates\",\r",
							"            \"additionalneeds\"\r",
							"        ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"bookingid\",\r",
							"        \"booking\"\r",
							"    ]\r",
							"    }\r",
							"\r",
							"    pm.test(\"Validate Schema\"),function(){\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"\r",
							"    //5. Request VS Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get the raw request body and Parse it to JSON\r",
							"        const rawRequestBody = pm.request.body.raw;\r",
							"        const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"        pm.expect(requestBody.firstname).to.eql(firstname);\r",
							"        pm.expect(requestBody.lastname).to.eql(lastname);\r",
							"        pm.expect(requestBody.totalprice).to.eql(totalprice);\r",
							"        pm.expect(requestBody.depositpaid).to.eql(depositpaid);\r",
							"        pm.expect(requestBody.bookingdates.checkin).to.eql(checkin);\r",
							"        pm.expect(requestBody.bookingdates.checkout).to.eql(checkout);\r",
							"        pm.expect(requestBody.additionalneeds).to.eql(additionalneeds);\r",
							"    });\r",
							"\r",
							"    //6. GET ALL BOOKING COUNT AFTER BOOKING CREATION\r",
							"    pm.test(\"Check Total Booking Count increased by 1\", function () {\r",
							"        \r",
							"        // Perform GET request for All Bookings\r",
							"        pm.sendRequest({\r",
							"            url: pm.environment.get(\"baseURL\")+'/booking',  \r",
							"            method: 'GET',\r",
							"            header: {\r",
							"               'Content-Type': 'application/json'\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return;\r",
							"            } else {\r",
							"               \r",
							"                const bookings = res.json(); \r",
							"                const count = bookings.length; \r",
							"                \r",
							"                    pm.expect(bookings).to.include(bookingID);\r",
							"                    //console.log(\"Total count BEFORE creating booking = \" + pm.collectionVariables.get(\"totalCountBeforeBooking\"))                    \r",
							"                    //console.log(\"Total count AFTER creating booking = \" + count)\r",
							"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"totalCountBeforeBooking\"))+1);                 \r",
							"            }\r",
							"        });\r",
							"    });\r",
							"\r",
							"\r",
							"    //Set bookingId at collection level\r",
							"    const bookingID = response.bookingid\r",
							"    pm.collectionVariables.set(\"bookingId\", bookingID)\r",
							"\r",
							"    //SET VALUE AT RUN TIME\r",
							"    const booking = {\r",
							"        \"firstname\": firstname,\r",
							"        \"lastname\": lastname,\r",
							"        \"totalprice\": totalprice,\r",
							"        \"depositpaid\": depositpaid,\r",
							"        \"checkin\": checkin,\r",
							"        \"checkout\": checkout,\r",
							"        \"additionalneeds\": additionalneeds\r",
							"    }\r",
							"\r",
							"    pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "2df8ce7f-eb68-4983-86a3-c25998e9f3fe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jimm\",\r\n    \"lastname\" : \"Brownn\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-04-23\",\r\n        \"checkout\" : \"2025-05-01\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking"
			},
			"response": [
				{
					"id": "0418101d-ad84-4605-981d-7f7edad6091b",
					"name": "GetBookingsById Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "https://restful-booker.herokuapp.com/booking"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1745214449&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=m0thS7E7srD5L3A%2FJiQ%2FWsqVKY3mESpcr8RznBRzs7g%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1745214449&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=m0thS7E7srD5L3A%2FJiQ%2FWsqVKY3mESpcr8RznBRzs7g%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "193"
						},
						{
							"key": "Etag",
							"value": "W/\"c1-K2M63WRnYEAUIY0qaLXQtZYTNI8\""
						},
						{
							"key": "Date",
							"value": "Mon, 21 Apr 2025 05:47:29 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"bookingid\": 3255,\n    \"booking\": {\n        \"firstname\": \"Jim\",\n        \"lastname\": \"Brown\",\n        \"totalprice\": 111,\n        \"depositpaid\": true,\n        \"bookingdates\": {\n            \"checkin\": \"2018-01-01\",\n            \"checkout\": \"2019-01-01\"\n        },\n        \"additionalneeds\": \"Lunch\"\n    }\n}"
				}
			]
		},
		{
			"name": "GetBookingById",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51f8a41e-b449-430a-a71d-f41e068e9c52",
						"exec": [
							"const resposne = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"\r",
							"//5. Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get Booking object from POST call from Collection Variable\r",
							"        const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"        \r",
							"        //Compare POST call response with GET call response\r",
							"        pm.expect(booking.firstname).to.eql(resposne.firstname);\r",
							"        pm.expect(booking.lastname).to.eql(resposne.lastname);\r",
							"        pm.expect(booking.totalprice).to.eql(resposne.totalprice);\r",
							"        pm.expect(booking.depositpaid).to.eql(resposne.depositpaid);\r",
							"        pm.expect(booking.checkin).to.eql(resposne.bookingdates.checkin);\r",
							"        pm.expect(booking.checkout).to.eql(resposne.bookingdates.checkout);\r",
							"        pm.expect(booking.additionalneeds).to.eql(resposne.additionalneeds);\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d7ad4aed-1949-4645-806a-b266ed71e477",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://restful-booker.herokuapp.com/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "GetExistingBookingsByCheck-inTime",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bcd6be8b-c032-44b5-a4ea-3d6b805d207a",
						"exec": [
							"// Get Booking object from POST call from Collection Variable\r",
							"const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"pm.variables.set(\"checkin\", booking.checkin);\r",
							"console.log(pm.variables.get(\"checkin\"))\r",
							"pm.variables.set(\"checkout\", booking.checkout);\r",
							"console.log(pm.variables.get(\"checkout\"))\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "59ba5e25-eae9-4c78-9a20-cc7e9daeed2b",
						"exec": [
							"const response = pm.response.json();\r",
							"const responseSize = response.length;\r",
							"console.log(responseSize);\r",
							"\r",
							"const checkinDate = pm.variables.get(\"checkin\")\r",
							"const checkoutDate = pm.variables.get(\"checkout\")\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"if(responseSize > 0){\r",
							"\r",
							"    //Fetch all the BookingIds from the response array\r",
							"    const BookingIds = response.map((issue) => issue.bookingid)\r",
							"\r",
							"    for (const e of BookingIds){ \r",
							"        \r",
							"        pm.test(`BookingId ${e} is within ${checkinDate} and ${checkoutDate}`, function () {\r",
							"\r",
							"            // Perform GET request for a Given Booking Id\r",
							"            pm.sendRequest({\r",
							"                url: pm.environment.get(\"baseURL\")+'/booking/'+e,  \r",
							"                method: 'GET',\r",
							"                header: {\r",
							"                'Content-Type': 'application/json'\r",
							"                }\r",
							"            }, function (err, res) {\r",
							"                if (err) {\r",
							"                    console.log(err);\r",
							"                    return;\r",
							"                } else {\r",
							"                \r",
							"                    const booking = res.json();                     \r",
							"                         pm.expect(booking.bookingdates.checkin).to.be.greaterThanOrEqual(checkinDate);               \r",
							"                         pm.expect(booking.bookingdates.checkout).to.be.lessThanOrEqual(checkoutDate);               \r",
							"\r",
							"                }\r",
							"            });\r",
							"               \r",
							"        });       \r",
							"\r",
							"    }\r",
							"\r",
							"    \r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "869d4997-8717-4842-8ebd-8ba59cffc2d5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking?checkin={{checkin}}&checkout={{checkout}}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}"
						},
						{
							"key": "checkout",
							"value": "{{checkout}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97dcf5dc-3e18-4aee-987f-3ce8bd440b66",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.firstname;\r",
							"var lastname = response.lastname;\r",
							"var totalprice = response.totalprice;\r",
							"var depositpaid = response.depositpaid;\r",
							"var checkin = response.bookingdates.checkin;\r",
							"var checkout = response.bookingdates.checkout;\r",
							"var additionalneeds = response.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is OK\", function () {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"    pm.test(\"Validate Schema\"),function(){\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"\r",
							"    //5. Request VS Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get the raw request body and Parse it to JSON\r",
							"        const rawRequestBody = pm.request.body.raw;\r",
							"        const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"        pm.expect(requestBody.firstname).to.eql(firstname);\r",
							"        pm.expect(requestBody.lastname).to.eql(lastname);\r",
							"        pm.expect(requestBody.totalprice).to.eql(totalprice);\r",
							"        pm.expect(requestBody.depositpaid).to.eql(depositpaid);\r",
							"        pm.expect(requestBody.bookingdates.checkin).to.eql(checkin);\r",
							"        pm.expect(requestBody.bookingdates.checkout).to.eql(checkout);\r",
							"        pm.expect(requestBody.additionalneeds).to.eql(additionalneeds);\r",
							"    });\r",
							"\r",
							"    \r",
							"\r",
							"    //Set Updated Booking Object\r",
							"        // Get Booking object from POST call from Collection Variable\r",
							"        const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"        booking.firstname = firstname;\r",
							"        booking.lastname = lastname;\r",
							"        booking.totalprice = totalprice;\r",
							"        booking.depositpaid = depositpaid;\r",
							"        booking.checkin = checkin;\r",
							"        booking.checkout = checkout;\r",
							"        booking.additionalneeds = additionalneeds;\r",
							"    \r",
							"        //Set updated Booking details at Collection Level Again\r",
							"        pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "39ba8d2c-77c3-4e6f-a4ee-3c0fd60e88aa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jimupdate\",\r\n    \"lastname\" : \"update\",\r\n    \"totalprice\" : 100,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Dinner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "GetBookingByName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "682b6490-3914-42df-aebd-23ef54cc4c6c",
						"exec": [
							"const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"pm.variables.set(\"bookingFirstName\",booking.firstname)\r",
							"pm.variables.set(\"bookingLastName\",booking.lastname)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "574a1c36-f570-4009-a9b9-1066cd121571",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Check if bookingid is matches\", function () {\r",
							"    pm.expect(response[0].bookingid).to.eql(pm.collectionVariables.get(\"bookingId\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a2fa4646-788b-4bd8-ac85-896eb3aa1917",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking?firstname={{bookingFirstName}}&lastname={{bookingLastName}}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{bookingFirstName}}"
						},
						{
							"key": "lastname",
							"value": "{{bookingLastName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef0f481d-6801-4fd7-91a2-a4e45634f702",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.firstname;\r",
							"var lastname = response.lastname;\r",
							"var totalprice = response.totalprice;\r",
							"var depositpaid = response.depositpaid;\r",
							"var checkin = response.bookingdates.checkin;\r",
							"var checkout = response.bookingdates.checkout;\r",
							"var additionalneeds = response.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is OK\", function () {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//5. Request VS Response Body Validation\r",
							"pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"    // Get the raw request body and Parse it to JSON\r",
							"    const rawRequestBody = pm.request.body.raw;\r",
							"    const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"    // Safely handle optional nested fields\r",
							"    const requestCheckin = requestBody.bookingdates?.checkin;\r",
							"    const requestCheckout = requestBody.bookingdates?.checkout;\r",
							"    /*This line is trying to get the value of checkin from requestBody.bookingdates. But it does it safely using ?. so that if bookingdates is undefined or null, it won’t throw an error—it'll just return undefined instead */\r",
							"\r",
							"    const array1 = [\r",
							"        requestBody.firstname,\r",
							"        requestBody.lastname,\r",
							"        requestBody.totalprice,\r",
							"        requestBody.depositpaid,\r",
							"        requestCheckin,\r",
							"        requestCheckout,\r",
							"        requestBody.additionalneeds\r",
							"    ];\r",
							"\r",
							"    const array2 = [\r",
							"        firstname,\r",
							"        lastname,\r",
							"        totalprice,\r",
							"        depositpaid,\r",
							"        checkin,\r",
							"        checkout,\r",
							"        additionalneeds\r",
							"    ];\r",
							"\r",
							"    console.log(\"Request Values:\", array1);\r",
							"    console.log(\"Response Values:\", array2);\r",
							"\r",
							"    for (let i = 0; i < array1.length; i++) {\r",
							"        if (array1[i] !== undefined) {\r",
							"            pm.expect(array1[i], `Mismatch at index ${i}`).to.eql(array2[i]);\r",
							"        } else {\r",
							"            console.log(`Index ${i}: Skipped (undefined in request)`);\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"//6. Check updated value in GET call\r",
							"pm.test(`Check Updated Booking details in GET Call`, function () {\r",
							"\r",
							"    // Perform GET request for a Given Booking Id\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"baseURL\")+'/booking/'+ pm.collectionVariables.get(\"bookingId\"),  \r",
							"        method: 'GET',\r",
							"        header: {\r",
							"        'Content-Type': 'application/json'\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.log(err);\r",
							"            return;\r",
							"        } else {\r",
							"                \r",
							"            const booking = res.json();    \r",
							"                pm.expect(booking.firstname).to.be.eql(firstname);               \r",
							"                pm.expect(booking.lastname).to.be.eql(lastname);               \r",
							"                pm.expect(booking.totalprice).to.be.eql(totalprice);               \r",
							"                pm.expect(booking.depositpaid).to.be.eql(depositpaid);               \r",
							"                pm.expect(booking.bookingdates.checkin).to.be.eql(checkin);              \r",
							"                pm.expect(booking.bookingdates.checkout).to.be.eql(checkout); \r",
							"                pm.expect(booking.additionalneeds).to.be.eql(additionalneeds);               \r",
							"                              \r",
							"        }\r",
							"    });\r",
							"               \r",
							"});\r",
							"\r",
							"//Set Updated Booking Object\r",
							"    // Get Booking object from POST call from Collection Variable\r",
							"    const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"    booking.firstname = firstname;\r",
							"    booking.lastname = lastname;\r",
							"    booking.totalprice = totalprice;\r",
							"    booking.depositpaid = depositpaid;\r",
							"    booking.checkin = checkin;\r",
							"    booking.checkout = checkout;\r",
							"    booking.additionalneeds = additionalneeds; \r",
							"\r",
							"    //Set updated Booking details at Collection Level Again\r",
							"    pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f9ace85c-d04c-4db9-8f2b-0fd5af0fb3f2",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "03be97c3-50a4-452f-b134-b3f88528a0e2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim Update\"\r\n    // \"lastname\" : \"Partial2\",\r\n    // \"totalprice\" : 150\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7ca6ffeb-280a-4ad6-83bd-e18995435bb8",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "71dd5f2d-04f3-41c4-8a05-b7d04d403fa0",
						"exec": [
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(201);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is OK\", function () {\r",
							"        pm.response.to.have.status(\"Created\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"    });\r",
							"\r",
							"\r",
							"    //4. Check updated value in GET call\r",
							"    pm.test(`Check Updated Booking details in GET Call`, function () {\r",
							"\r",
							"        // Perform GET request for a Given Booking Id\r",
							"        pm.sendRequest({\r",
							"            //url: pm.environment.get(\"baseURL\")+'/booking/'+ pm.collectionVariables.get(\"bookingId\"),  \r",
							"            url: pm.environment.get(\"baseURL\")+'/booking/'+ 2602,  \r",
							"            method: 'DELETE',\r",
							"            header: {\r",
							"            'Content-Type': 'application/json'\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return;\r",
							"            } else {\r",
							"                pm.response.to.have.status(404); \r",
							"                pm.response.to.have.status(\"Not Found\");     \r",
							"                pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"                pm.response.to.have.body(\"Not Found\");\r",
							"            }\r",
							"        });\r",
							"                \r",
							"    });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ab2f599e-e43a-44bd-8fcb-72ca1b037f4c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "494d278c-648b-45e0-a88a-2ef351430516",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4e853116-4f06-45e9-b19c-ebf0f4cce93d",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"//Note: change all collection variable to local variables to give highest level of access"
				]
			}
		}
	],
	"variable": [
		{
			"key": "bookingId",
			"value": ""
		},
		{
			"key": "totalCountBeforeBooking",
			"value": ""
		},
		{
			"key": "booking",
			"value": ""
		},
		{
			"key": "bookingFirstName",
			"value": ""
		},
		{
			"key": "bookingLastName",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}