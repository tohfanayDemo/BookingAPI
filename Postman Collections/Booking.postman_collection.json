{
	"info": {
		"_postman_id": "8ae0a803-84e5-450a-a9f8-3d14f1d9be78",
		"name": "Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "878eabfa-ea6f-477f-88c4-aba2cd58d6c6",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response.token)\r",
							"pm.variables.set(\"token\", response.token)\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c9c9e7cf-0aee-4d2e-a9e7-0a33d303e3c9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"{{username}}\",\n    \"password\" : \"{{password}}\"\n}\n\n\n\n\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/auth"
			},
			"response": []
		},
		{
			"name": "Negative - CreateToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "878eabfa-ea6f-477f-88c4-aba2cd58d6c6",
						"exec": [
							"setTimeout(() => {}, 1000);\r",
							"const expStatusCode = pm.variables.get(\"statusCode\");\r",
							"const expStatusLine = pm.variables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"const expMessage = pm.variables.get(\"message\");\r",
							"\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status\r",
							"// pm.test(`Validate ${scenarioName} - Status code is ${expStatusCode}`, function () {\r",
							"//     pm.response.to.have.status(expStatusCode);\r",
							"// });\r",
							"\r",
							"console.log(\"validateStatusCode_Negative\")\r",
							"responseValidation.validateStatusCode_Negative();\r",
							"\r",
							"//2. Status Line\r",
							"// pm.test(`Validate ${scenarioName} - Status message is ${expStatusLine}`, function () {\r",
							"//     pm.response.to.have.status(expStatusLine);\r",
							"// });\r",
							"\r",
							"console.log(\"validateStatusCode_Negative\")\r",
							"responseValidation.validateStatusLine_Negative();\r",
							"\r",
							"//3. Scenario specific Tests\r",
							"if(scenarioName.includes(\"Incorrect Credentials\")) {\r",
							"    pm.test(`Validate ${scenarioName} JSON Response msg`, () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
							"        pm.expect(pm.response.json().reason).to.eql(expMessage);       \r",
							"    });\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "50039e07-6ce6-43b4-8ff9-a7ed29c86ae8",
						"exec": [
							"setTimeout(() => {}, 1000);\r",
							"var scenarioName = pm.variables.get(\"scenarioName\");\r",
							"console.log(\"Inside pre-requisite --> Scenario Name \"+scenarioName)\r",
							"\r",
							"//Set the test data for the request\r",
							"let baseURL = setTestData.getVariableOrEnv(\"baseURL\", \"baseURL\", \"\");\r",
							"pm.variables.set(\"baseURL\",baseURL);\r",
							"\r",
							"\r",
							"let endPoint = setTestData.getVariableOrEnv(\"endPoint\", \"endPoint\", \"auth\");\r",
							"pm.variables.set(\"endPoint\",endPoint);\r",
							"\r",
							"let httpMethod = setTestData.getVariableOrEnv(\"httpMethod\", \"httpMethod\", \"POST\");\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"//let contentType = setTestData.getVariableOrEnv(\"contentType\", \"contentType\", \"application/json\");\r",
							"let username = setTestData.getVariableOrEnv(\"username\", \"username\", \"\");\r",
							"pm.variables.set(\"username\",username);\r",
							"\r",
							"let password = setTestData.getVariableOrEnv(\"password\", \"password\", \"\");\r",
							"pm.variables.set(\"password\",password);\r",
							"\r",
							"//Tweak data based on scenario needs\r",
							"if(scenarioName === \"Incorrect Content-Type\"){\r",
							"    var contentType = \"application/xml\"; \r",
							"\r",
							"    // Set the header for Content-Type\r",
							"    pm.request.headers.add({\r",
							"        key: \"Content-Type\",\r",
							"        value: contentType\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "4b9d46d0-616a-497f-a02c-509aa33a93a5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"{{username}}\",\n    \"password\" : \"{{password}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/{{endPoint}}"
			},
			"response": []
		},
		{
			"name": "GetAllBookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cd7a887-549c-491b-89f6-291f0f5127c0",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4. Schema Validation \r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"//SET TOTAL COUNT\r",
							"const totalCountBeforeBooking = response.length;\r",
							"pm.collectionVariables.set(\"totalCountBeforeBooking\", totalCountBeforeBooking)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "20970763-2d77-4bf4-9563-5c65e5463936",
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "20eff09d-51ca-4c9d-873e-ff26570d1a76",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/booking"
			},
			"response": []
		},
		{
			"name": "Negative - GetAllBookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cd7a887-549c-491b-89f6-291f0f5127c0",
						"exec": [
							"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
							"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status Code\r",
							"pm.test(`Validate ${scenarioName} - Status code is ${expStatusCode}`, function () {\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(`Validate ${scenarioName} - Status message is ${expStatusLine}`, function () {\r",
							"    pm.response.to.have.status(expStatusLine);\r",
							"});\r",
							"\r",
							"//3. Response Header Content Type\r",
							"pm.test(`Validate ${scenarioName} - Validate Response Header Text ContentType`, function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b6fe22b3-c60c-4a11-9549-45791219ffc0",
						"exec": [
							"\r",
							"\r",
							"//Set the test data for the request\r",
							"let baseURL = setTestData.getVariableOrEnv(\"baseURL\", \"baseURL\", \"\");\r",
							"pm.variables.set(\"baseURL\",baseURL);\r",
							"\r",
							"let endPoint = setTestData.getVariableOrEnv(\"endPoint\", \"endPoint\", \"booking\");\r",
							"pm.variables.set(\"endPoint\",endPoint);\r",
							"\r",
							"let httpMethod = setTestData.getVariableOrEnv(\"httpMethod\", \"httpMethod\", \"GET\");\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c605c2c4-0b76-45c4-85ba-443077b94d69",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/{{endPoint}}"
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67c015cb-60ed-432c-8c94-96d1a82588f5",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.booking.firstname;\r",
							"var lastname = response.booking.lastname;\r",
							"var totalprice = response.booking.totalprice;\r",
							"var depositpaid = response.booking.depositpaid;\r",
							"var checkin = response.booking.bookingdates.checkin;\r",
							"var checkout = response.booking.bookingdates.checkout;\r",
							"var additionalneeds = response.booking.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 201\", function () {\r",
							"        pm.response.to.have.status(201);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is Created\", function () {\r",
							"        pm.response.to.have.status(\"Created\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"title\": \"Generated schema for Root\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"        },\r",
							"        \"booking\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"firstname\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"lastname\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"totalprice\": {\r",
							"            \"type\": \"number\"\r",
							"            },\r",
							"            \"depositpaid\": {\r",
							"            \"type\": \"boolean\"\r",
							"            },\r",
							"            \"bookingdates\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"checkin\": {\r",
							"                \"type\": \"string\"\r",
							"                },\r",
							"                \"checkout\": {\r",
							"                \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"checkin\",\r",
							"                \"checkout\"\r",
							"            ]\r",
							"            },\r",
							"            \"additionalneeds\": {\r",
							"            \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"firstname\",\r",
							"            \"lastname\",\r",
							"            \"totalprice\",\r",
							"            \"depositpaid\",\r",
							"            \"bookingdates\",\r",
							"            \"additionalneeds\"\r",
							"        ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"bookingid\",\r",
							"        \"booking\"\r",
							"    ]\r",
							"    }\r",
							"\r",
							"    pm.test(\"Validate Schema\"),function(){\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"\r",
							"    //5. Request VS Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get the raw request body and Parse it to JSON\r",
							"        const rawRequestBody = pm.request.body.raw;\r",
							"        const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"        pm.expect(requestBody.firstname).to.eql(firstname);\r",
							"        pm.expect(requestBody.lastname).to.eql(lastname);\r",
							"        pm.expect(requestBody.totalprice).to.eql(totalprice);\r",
							"        pm.expect(requestBody.depositpaid).to.eql(depositpaid);\r",
							"        pm.expect(requestBody.bookingdates.checkin).to.eql(checkin);\r",
							"        pm.expect(requestBody.bookingdates.checkout).to.eql(checkout);\r",
							"        pm.expect(requestBody.additionalneeds).to.eql(additionalneeds);\r",
							"    });\r",
							"\r",
							"    //6. GET ALL BOOKING COUNT AFTER BOOKING CREATION\r",
							"    pm.test(\"Check Total Booking Count increased by 1\", function () {\r",
							"        \r",
							"        // Perform GET request for All Bookings\r",
							"        pm.sendRequest({\r",
							"            url: pm.environment.get(\"baseURL\")+'/booking',  \r",
							"            method: 'GET',\r",
							"            header: {\r",
							"               'Content-Type': 'application/json'\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return;\r",
							"            } else {\r",
							"               \r",
							"                const bookings = res.json(); \r",
							"                const count = bookings.length; \r",
							"                \r",
							"                    pm.expect(bookings).to.include(bookingID);\r",
							"                    //console.log(\"Total count BEFORE creating booking = \" + pm.collectionVariables.get(\"totalCountBeforeBooking\"))                    \r",
							"                    //console.log(\"Total count AFTER creating booking = \" + count)\r",
							"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"totalCountBeforeBooking\"))+1);                 \r",
							"            }\r",
							"        });\r",
							"    });\r",
							"\r",
							"\r",
							"    //Set bookingId at collection level\r",
							"    const bookingID = response.bookingid\r",
							"    pm.collectionVariables.set(\"bookingId\", bookingID)\r",
							"    //pm.variables.set(\"bookingId\", bookingID)\r",
							"\r",
							"    //SET VALUE AT RUN TIME\r",
							"    const booking = {\r",
							"        \"firstname\": firstname,\r",
							"        \"lastname\": lastname,\r",
							"        \"totalprice\": totalprice,\r",
							"        \"depositpaid\": depositpaid,\r",
							"        \"checkin\": checkin,\r",
							"        \"checkout\": checkout,\r",
							"        \"additionalneeds\": additionalneeds\r",
							"    }\r",
							"\r",
							"    pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							"    //pm.variables.set(\"booking\", JSON.stringify(booking));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "27585bb0-45cf-42e7-a946-9d6ac351cf58",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "2df8ce7f-eb68-4983-86a3-c25998e9f3fe",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking"
			},
			"response": []
		},
		{
			"name": "Negative - CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67c015cb-60ed-432c-8c94-96d1a82588f5",
						"exec": [
							"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
							"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status Code\r",
							"pm.test(`Validate ${scenarioName} - Status code is ${expStatusCode}`, function () {\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(`Validate ${scenarioName} - Status message is ${expStatusLine}`, function () {\r",
							"    pm.response.to.have.status(expStatusLine);\r",
							"});\r",
							"\r",
							"//3. Response Header Content Type\r",
							"pm.test(`Validate ${scenarioName} - Validate Response Header Text ContentType`, function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "27585bb0-45cf-42e7-a946-9d6ac351cf58",
						"exec": [
							"setTimeout(() => {}, 1000);\r",
							"var scenarioName = pm.variables.get(\"scenarioName\");\r",
							"console.log(\"Inside pre-requisite --> Scenario Name \"+scenarioName)\r",
							"\r",
							"//Set the test data for the request\r",
							"let baseURL = setTestData.getVariableOrEnv(\"baseURL\", \"baseURL\", \"\");\r",
							"pm.variables.set(\"baseURL\",baseURL);\r",
							"\r",
							"let endPoint = setTestData.getVariableOrEnv(\"endPoint\", \"endPoint\", \"booking\");\r",
							"pm.variables.set(\"endPoint\",endPoint);\r",
							"\r",
							"let httpMethod = setTestData.getVariableOrEnv(\"httpMethod\", \"httpMethod\", \"POST\");\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"//Tweak data based on scenario needs\r",
							"if(scenarioName === \"Incorrect Content-Type\"){\r",
							"    var contentType = \"application/xml\"; \r",
							"\r",
							"    // Set the header for Content-Type\r",
							"    pm.request.headers.add({\r",
							"        key: \"Content-Type\",\r",
							"        value: contentType\r",
							"    });\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "42ea08e2-9068-494a-acf4-29c237af5d7d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking"
			},
			"response": []
		},
		{
			"name": "GetBookingById",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51f8a41e-b449-430a-a71d-f41e068e9c52",
						"exec": [
							"const resposne = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"\r",
							"//5. Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get Booking object from POST call from Collection Variable\r",
							"        const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"        //const booking = JSON.parse(pm.variables.get(\"booking\"));\r",
							"\r",
							"        \r",
							"        //Compare Created booking details in POST Call with GET call response\r",
							"        pm.expect(pm.collectionVariables.get(\"bookingId\")).to.eql(resposne.bookingid);\r",
							"        pm.expect(booking.firstname).to.eql(resposne.firstname);\r",
							"        pm.expect(booking.lastname).to.eql(resposne.lastname);\r",
							"        pm.expect(booking.totalprice).to.eql(resposne.totalprice);\r",
							"        pm.expect(booking.depositpaid).to.eql(resposne.depositpaid);\r",
							"        pm.expect(booking.checkin).to.eql(resposne.bookingdates.checkin);\r",
							"        pm.expect(booking.checkout).to.eql(resposne.bookingdates.checkout);\r",
							"        pm.expect(booking.additionalneeds).to.eql(resposne.additionalneeds);\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "568d4721-2699-4e73-aff1-6ea751d457f9",
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "d7ad4aed-1949-4645-806a-b266ed71e477",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "Negative - GetBookingById",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51f8a41e-b449-430a-a71d-f41e068e9c52",
						"exec": [
							"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
							"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status Code\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Status code is ${expStatusCode}`, function () {\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Status message is ${expStatusLine}`, function () {\r",
							"    pm.response.to.have.status(expStatusLine);\r",
							"});\r",
							"\r",
							"//3. Response Header Content Type\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Response Header Text ContentType`, function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d2c4d302-97cc-4e22-ba8c-0a32822fe45e",
						"exec": [
							"setTimeout(() => {}, 1000);\r",
							"var scenarioName = pm.variables.get(\"scenarioName\");\r",
							"console.log(\"Inside pre-requisite --> Scenario Name \"+scenarioName)\r",
							"\r",
							"//Set the test data for the request\r",
							"let baseURL = setTestData.getVariableOrEnv(\"baseURL\", \"baseURL\", \"\");\r",
							"pm.variables.set(\"baseURL\",baseURL);\r",
							"\r",
							"let endPoint = setTestData.getVariableOrEnv(\"endPoint\", \"endPoint\", \"booking\");\r",
							"pm.variables.set(\"endPoint\",endPoint);\r",
							"\r",
							"let bookingId = setTestData.getVariableOrEnv(\"bookingId\", \"bookingId\", pm.collectionVariables.get(\"bookingId\"));\r",
							"pm.variables.set(\"bookingId\",bookingId);\r",
							"\r",
							"let httpMethod = setTestData.getVariableOrEnv(\"httpMethod\", \"httpMethod\", \"GET\");\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "65c5af9b-b02f-4b30-8619-4b73693d3c31",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseURL}}/{{endPoint}}/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "GetExistingBookingsByCheck-inTime",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "bcd6be8b-c032-44b5-a4ea-3d6b805d207a",
						"exec": [
							"// Get Booking object from POST call from Collection Variable\r",
							"const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"pm.variables.set(\"checkin\", booking.checkin);\r",
							"pm.variables.set(\"checkout\", booking.checkout);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "59ba5e25-eae9-4c78-9a20-cc7e9daeed2b",
						"exec": [
							"const response = pm.response.json();\r",
							"const responseSize = response.length;\r",
							"console.log(responseSize);\r",
							"\r",
							"const checkinDate = pm.variables.get(\"checkin\")\r",
							"const checkoutDate = pm.variables.get(\"checkout\")\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"if(responseSize > 0){\r",
							"\r",
							"    //Fetch all the BookingIds from the response array\r",
							"    const BookingIds = response.map((issue) => issue.bookingid)\r",
							"\r",
							"    for (const e of BookingIds){ \r",
							"        \r",
							"        pm.test(`BookingId ${e} is within ${checkinDate} and ${checkoutDate}`, function () {\r",
							"\r",
							"            // Perform GET request for a Given Booking Id\r",
							"            pm.sendRequest({\r",
							"                url: pm.environment.get(\"baseURL\")+'/booking/'+e,  \r",
							"                method: 'GET',\r",
							"                header: {\r",
							"                'Content-Type': 'application/json'\r",
							"                }\r",
							"            }, function (err, res) {\r",
							"                if (err) {\r",
							"                    console.log(err);\r",
							"                    return;\r",
							"                } else {\r",
							"                \r",
							"                    const booking = res.json();                     \r",
							"                         pm.expect(booking.bookingdates.checkin).to.be.greaterThanOrEqual(checkinDate);               \r",
							"                         pm.expect(booking.bookingdates.checkout).to.be.lessThanOrEqual(checkoutDate);               \r",
							"\r",
							"                }\r",
							"            });\r",
							"               \r",
							"        });       \r",
							"\r",
							"    }\r",
							"\r",
							"    \r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "869d4997-8717-4842-8ebd-8ba59cffc2d5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking?checkin={{checkin}}&checkout={{checkout}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}"
						},
						{
							"key": "checkout",
							"value": "{{checkout}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97dcf5dc-3e18-4aee-987f-3ce8bd440b66",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.firstname;\r",
							"var lastname = response.lastname;\r",
							"var totalprice = response.totalprice;\r",
							"var depositpaid = response.depositpaid;\r",
							"var checkin = response.bookingdates.checkin;\r",
							"var checkout = response.bookingdates.checkout;\r",
							"var additionalneeds = response.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is OK\", function () {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"    pm.test(\"Validate Schema\"),function(){\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"\r",
							"    //5. Request VS Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get the raw request body and Parse it to JSON\r",
							"        const rawRequestBody = pm.request.body.raw;\r",
							"        const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"        pm.expect(requestBody.firstname).to.eql(firstname);\r",
							"        pm.expect(requestBody.lastname).to.eql(lastname);\r",
							"        pm.expect(requestBody.totalprice).to.eql(totalprice);\r",
							"        pm.expect(requestBody.depositpaid).to.eql(depositpaid);\r",
							"        pm.expect(requestBody.bookingdates.checkin).to.eql(checkin);\r",
							"        pm.expect(requestBody.bookingdates.checkout).to.eql(checkout);\r",
							"        pm.expect(requestBody.additionalneeds).to.eql(additionalneeds);\r",
							"    });\r",
							"\r",
							"    \r",
							"\r",
							"    //Set Updated Booking Object\r",
							"        // Get Booking object from POST call from Collection Variable\r",
							"        const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"        //const booking = JSON.parse(pm.variables.get(\"booking\"));\r",
							"\r",
							"        booking.firstname = firstname;\r",
							"        booking.lastname = lastname;\r",
							"        booking.totalprice = totalprice;\r",
							"        booking.depositpaid = depositpaid;\r",
							"        booking.checkin = checkin;\r",
							"        booking.checkout = checkout;\r",
							"        booking.additionalneeds = additionalneeds;\r",
							"    \r",
							"        //Set updated Booking details at Collection Level Again\r",
							"        pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							"        //pm.variables.set(\"booking\", JSON.stringify(booking));\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8aca5243-dccf-4d66-97b2-75dbcd58af78",
						"exec": [
							"//Get token\r",
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "39ba8d2c-77c3-4e6f-a4ee-3c0fd60e88aa",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "Negative - UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "97dcf5dc-3e18-4aee-987f-3ce8bd440b66",
						"exec": [
							"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
							"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status Code\r",
							"pm.test(`Validate ${scenarioName} - Status code is ${expStatusCode}`, function () {\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(`Validate ${scenarioName} - Status message is ${expStatusLine}`, function () {\r",
							"    pm.response.to.have.status(expStatusLine);\r",
							"});\r",
							"\r",
							"//3. Response Header Content Type\r",
							"pm.test(`Validate ${scenarioName} - Validate Response Header Text ContentType`, function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "8aca5243-dccf-4d66-97b2-75dbcd58af78",
						"exec": [
							"//Get token\r",
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							"\r",
							"//work on setup for no auth scenario"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "6dbc8bc1-f508-4327-9ff2-3eda5ccb044d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : {{totalprice}},\r\n    \"depositpaid\" : {{depositpaid}},\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "GetBookingByName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "682b6490-3914-42df-aebd-23ef54cc4c6c",
						"exec": [
							"const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"pm.variables.set(\"bookingFirstName\",booking.firstname)\r",
							"pm.variables.set(\"bookingLastName\",booking.lastname)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "574a1c36-f570-4009-a9b9-1066cd121571",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Check if bookingid matches\", function () {\r",
							"    pm.expect(response[0].bookingid).to.eql(pm.collectionVariables.get(\"bookingId\"));\r",
							"    //pm.expect(response[0].bookingid).to.eql(pm.variables.get(\"bookingId\"));\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "a2fa4646-788b-4bd8-ac85-896eb3aa1917",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking?firstname={{bookingFirstName}}&lastname={{bookingLastName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{bookingFirstName}}"
						},
						{
							"key": "lastname",
							"value": "{{bookingLastName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative - GetBookingByName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "682b6490-3914-42df-aebd-23ef54cc4c6c",
						"exec": [
							"setTimeout(() => { }, 1000);\r",
							"var scenarioName = pm.variables.get(\"scenarioName\");\r",
							"console.log(\"Inside pre-requisite --> Scenario Name \" + scenarioName)\r",
							"\r",
							"//Set the test data for the request\r",
							"let baseURL = setTestData.getVariableOrEnv(\"baseURL\", \"baseURL\", \"\");\r",
							"pm.variables.set(\"baseURL\", baseURL);\r",
							"\r",
							"let endPoint = setTestData.getVariableOrEnv(\"endPoint\", \"endPoint\", \"booking\");\r",
							"pm.variables.set(\"endPoint\", endPoint);\r",
							"\r",
							"const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"pm.variables.set(\"bookingFirstName\", booking.firstname)\r",
							"pm.variables.set(\"bookingLastName\", booking.lastname)\r",
							"\r",
							"let bookingFirstName = setTestData.getVariableOrEnv(\"bookingFirstName\", \"bookingFirstName\", booking.firstname);\r",
							"pm.variables.set(\"bookingFirstName\", bookingFirstName)\r",
							"\r",
							"let bookingLastName = setTestData.getVariableOrEnv(\"bookingLastName\", \"bookingLastName\", booking.lastname);\r",
							"pm.variables.set(\"bookingLastName\", bookingLastName)\r",
							"\r",
							"let httpMethod = setTestData.getVariableOrEnv(\"httpMethod\", \"httpMethod\", \"GET\");\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"// Set the headers for the request\r",
							"\r",
							"    // Build the query string based on the scenario\r",
							"    let queryString = \"\";\r",
							"    if (scenarioName === \"Missing First Name\") {\r",
							"        queryString = `?lastname=${bookingLastName}`;\r",
							"    } else if (scenarioName === \"Missing Last Name\") {\r",
							"        queryString = `?firstname=${bookingFirstName}`;\r",
							"    } else if (scenarioName === \"Missing Both  Names\") {\r",
							"        queryString = \"\";\r",
							"    } else {\r",
							"        // Default (include both)\r",
							"        queryString = `?firstname=${bookingFirstName}&lastname=${bookingLastName}`;\r",
							"    }\r",
							"\r",
							"    // Build full URL and override request URL\r",
							"    let finalURL = `${baseURL}/${endPoint}${queryString}`;\r",
							"    pm.request.url = finalURL;\r",
							"\r",
							"    console.log(\"Final URL: \" + finalURL);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "574a1c36-f570-4009-a9b9-1066cd121571",
						"exec": [
							"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
							"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status Code\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Status code is ${expStatusCode}`, function () {\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Status message is ${expStatusLine}`, function () {\r",
							"    pm.response.to.have.status(expStatusLine);\r",
							"});\r",
							"\r",
							"//3. Response Header Content Type\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Response Header Text ContentType`, function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "36b54a67-4ad5-4e2b-a2d5-8ac72a69be74",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/{{endPoint}}?firstname={{bookingFirstName}}&lastname={{bookingLastName}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"{{endPoint}}"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{bookingFirstName}}"
						},
						{
							"key": "lastname",
							"value": "{{bookingLastName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "WIP - PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef0f481d-6801-4fd7-91a2-a4e45634f702",
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.firstname;\r",
							"var lastname = response.lastname;\r",
							"var totalprice = response.totalprice;\r",
							"var depositpaid = response.depositpaid;\r",
							"var checkin = response.bookingdates.checkin;\r",
							"var checkout = response.bookingdates.checkout;\r",
							"var additionalneeds = response.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is OK\", function () {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\", function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"//5. Request VS Response Body Validation\r",
							"pm.test(\"Booking details in Request and Response match (for sent fields only)\", function () {\r",
							"    // Parse raw request body to JSON\r",
							"    const rawRequestBody = pm.request.body.raw;\r",
							"    const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"    // Flatten bookingdates into top-level keys for easier comparison\r",
							"    const flattenedRequest = { ...requestBody };\r",
							"\r",
							"    if (requestBody.bookingdates) {\r",
							"        if (requestBody.bookingdates.checkin) {\r",
							"            flattenedRequest.checkin = requestBody.bookingdates.checkin;\r",
							"        }\r",
							"        if (requestBody.bookingdates.checkout) {\r",
							"            flattenedRequest.checkout = requestBody.bookingdates.checkout;\r",
							"        }\r",
							"    }\r",
							"\r",
							"    // Fields to compare (if they exist in the request)\r",
							"    const keysToCompare = [\"firstname\",\"lastname\",\"totalprice\",\"depositpaid\",\"checkin\",\"checkout\",\"additionalneeds\"];\r",
							"\r",
							"    // Compare each key that exists in request\r",
							"    keysToCompare.forEach(key => {\r",
							"        if (flattenedRequest.hasOwnProperty(key)) {\r",
							"            const expected = flattenedRequest[key];\r",
							"            const actual = pm.variables.get(key);\r",
							"\r",
							"            console.log(`Comparing [${key}]: request =`, expected, \" | response =\", actual);\r",
							"\r",
							"            pm.expect(actual, `Mismatch in '${key}'`).to.eql(expected);\r",
							"        } else {\r",
							"            console.log(`ℹ️ Skipped [${key}] — not included in request.`);\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"//6. Check updated value in GET call\r",
							"pm.test(`Check Updated Booking details in GET Call`, function () {\r",
							"\r",
							"    // Perform GET request for a Given Booking Id\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"baseURL\")+'/booking/'+ pm.collectionVariables.get(\"bookingId\"),  \r",
							"        //url: pm.environment.get(\"baseURL\")+'/booking/'+ pm.variables.get(\"bookingId\"),  \r",
							"\r",
							"        method: 'GET',\r",
							"        header: {\r",
							"        'Content-Type': 'application/json'\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        if (err) {\r",
							"            console.log(err);\r",
							"            return;\r",
							"        } else {\r",
							"                \r",
							"            const booking = res.json();    \r",
							"                pm.expect(booking.firstname).to.be.eql(firstname);               \r",
							"                pm.expect(booking.lastname).to.be.eql(lastname);               \r",
							"                pm.expect(booking.totalprice).to.be.eql(totalprice);               \r",
							"                pm.expect(booking.depositpaid).to.be.eql(depositpaid);               \r",
							"                pm.expect(booking.bookingdates.checkin).to.be.eql(checkin);              \r",
							"                pm.expect(booking.bookingdates.checkout).to.be.eql(checkout); \r",
							"                pm.expect(booking.additionalneeds).to.be.eql(additionalneeds);               \r",
							"                              \r",
							"        }\r",
							"    });\r",
							"               \r",
							"});\r",
							"\r",
							"//Set Updated Booking Object\r",
							"    // Get Booking object from POST call from Collection Variable\r",
							"    const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"    //const booking = JSON.parse(pm.variables.get(\"booking\"));\r",
							"\r",
							"\r",
							"    booking.firstname = firstname;\r",
							"    booking.lastname = lastname;\r",
							"    booking.totalprice = totalprice;\r",
							"    booking.depositpaid = depositpaid;\r",
							"    booking.checkin = checkin;\r",
							"    booking.checkout = checkout;\r",
							"    booking.additionalneeds = additionalneeds; \r",
							"\r",
							"    //Set updated Booking details at Collection Level Again\r",
							"    pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							"    //pm.variables.set(\"booking\", JSON.stringify(booking));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f9ace85c-d04c-4db9-8f2b-0fd5af0fb3f2",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "03be97c3-50a4-452f-b134-b3f88528a0e2",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim Update\"\r\n    // \"lastname\" : \"Partial2\",\r\n    // \"totalprice\" : 150\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "WIP - Negative - PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ef0f481d-6801-4fd7-91a2-a4e45634f702",
						"exec": [
							"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
							"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status Code\r",
							"pm.test(`Validate ${scenarioName} - Status code is ${expStatusCode}`, function () {\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(`Validate ${scenarioName} - Status message is ${expStatusLine}`, function () {\r",
							"    pm.response.to.have.status(expStatusLine);\r",
							"});\r",
							"\r",
							"//3. Response Header Content Type\r",
							"pm.test(`Validate ${scenarioName} - Validate Response Header Text ContentType`, function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f9ace85c-d04c-4db9-8f2b-0fd5af0fb3f2",
						"exec": [
							"//Get token\r",
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "0e070781-9f03-4bbf-b05f-8a10492090d8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jim Update\"\r\n    // \"lastname\" : \"Partial2\",\r\n    // \"totalprice\" : 150\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7ca6ffeb-280a-4ad6-83bd-e18995435bb8",
						"exec": [
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "71dd5f2d-04f3-41c4-8a05-b7d04d403fa0",
						"exec": [
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 204\", function () {\r",
							"        pm.response.to.have.status(204);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is No Content\", function () {\r",
							"        pm.response.to.have.status(\"No Content\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"    });\r",
							"\r",
							"\r",
							"    //4. Check updated value in GET call\r",
							"    pm.test(`Check Updated Booking details in GET Call`, function () {\r",
							"\r",
							"        // Perform GET request for a Given Booking Id\r",
							"        pm.sendRequest({\r",
							"            url: pm.environment.get(\"baseURL\")+'/booking/'+ pm.collectionVariables.get(\"bookingId\"),  \r",
							"            //url: pm.environment.get(\"baseURL\")+'/booking/'+ 2602,  \r",
							"            method: 'DELETE',\r",
							"            header: {\r",
							"            'Content-Type': 'application/json'\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return;\r",
							"            } else {\r",
							"                pm.response.to.have.status(404); \r",
							"                pm.response.to.have.status(\"Not Found\");     \r",
							"                pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"                pm.response.to.have.body(\"Not Found\");\r",
							"            }\r",
							"        });\r",
							"                \r",
							"    });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ab2f599e-e43a-44bd-8fcb-72ca1b037f4c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"url": "{{baseURL}}/booking/{{bookingId}}"
			},
			"response": []
		},
		{
			"name": "Negative - DeleteBooking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7ca6ffeb-280a-4ad6-83bd-e18995435bb8",
						"exec": [
							"setTimeout(() => {}, 1000);\r",
							"pm.sendRequest({\r",
							"    url: 'https://restful-booker.herokuapp.com/auth',\r",
							"    method: 'POST',\r",
							"    header:{ \r",
							"        'Content-Type': 'application/json',\r",
							"    },\r",
							"    body:{\r",
							"            mode: 'raw',\r",
							"            raw: JSON.stringify({\r",
							"                    \"username\" : \"admin\",\r",
							"                    \"password\" : \"password123\"\r",
							"                })\r",
							"    }\r",
							"      \r",
							"},  function(err, response){\r",
							"    if(err){\r",
							"        console.log(err);\r",
							"        return;\r",
							"    }\r",
							"    else{\r",
							"        const authResponse = response.json();\r",
							"        const tokenId = authResponse.token;\r",
							"\r",
							"        pm.variables.set(\"token\",tokenId);\r",
							"    }\r",
							"}\r",
							")\r",
							"\r",
							"\r",
							"var scenarioName = pm.variables.get(\"scenarioName\");\r",
							"console.log(\"Inside pre-requisite --> Scenario Name \"+scenarioName)\r",
							"\r",
							"//Set the test data for the request\r",
							"let baseURL = setTestData.getVariableOrEnv(\"baseURL\", \"baseURL\", \"\");\r",
							"pm.variables.set(\"baseURL\",baseURL);\r",
							"\r",
							"let endPoint = setTestData.getVariableOrEnv(\"endPoint\", \"endPoint\", \"booking\");\r",
							"pm.variables.set(\"endPoint\",endPoint);\r",
							"\r",
							"let bookingId = setTestData.getVariableOrEnv(\"bookingId\", \"bookingId\", pm.collectionVariables.get(\"bookingId\"));\r",
							"pm.variables.set(\"bookingId\",bookingId);\r",
							"\r",
							"let httpMethod = setTestData.getVariableOrEnv(\"httpMethod\", \"httpMethod\", \"DELETE\");\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"if(scenarioName == \"No Auth\"){\r",
							"    pm.variables.set(\"token\",\"\");\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "71dd5f2d-04f3-41c4-8a05-b7d04d403fa0",
						"exec": [
							"const expStatusCode = pm.collectionVariables.get(\"statusCode\");\r",
							"const expStatusLine = pm.collectionVariables.get(\"statusLine\");\r",
							"const scenarioName = pm.variables.get(\"scenarioName\");\r",
							"\r",
							"//NEGATIVE TEST VALIDATION\r",
							"//1. Status Code\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Status code is ${expStatusCode}`, function () {\r",
							"    pm.response.to.have.status(expStatusCode);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Status message is ${expStatusLine}`, function () {\r",
							"    pm.response.to.have.status(expStatusLine);\r",
							"});\r",
							"\r",
							"//3. Response Header Content Type\r",
							"pm.test(`For Scenario \"${scenarioName}\" - Validate Response Header Text ContentType`, function () {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "ac6c7272-9aa9-40e5-a209-764292824077",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"url": "{{baseURL}}/{{endPoint}}/{{bookingId}}"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7601be51-6cdd-4b2e-a45e-48d1805ada7e",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"/* UTIL functions */\r",
					"setTestData = {\r",
					"    getVariableOrEnv: function (varName, envName, defaultValue) {\r",
					"        if (pm.variables.get(varName) !== undefined && pm.variables.get(varName) !== null) {\r",
					"            return pm.variables.get(varName);\r",
					"        } else if (pm.environment.get(envName)) {\r",
					"            return pm.environment.get(envName);\r",
					"        } else {\r",
					"            return defaultValue;\r",
					"        }\r",
					"    }\r",
					"};\r",
					"\r",
					"/** Set up Environment values dynamically at run time -- execution env passed trough jenkin goals*/\r",
					"pm.environment.set(\"username\", \"{{cmd_username}}\");\r",
					"pm.environment.set(\"password\", \"{{cmd_password}}\");\r",
					"let test_env = \"{{cmd_baseURL}}\";\r",
					"\r",
					"if(env == \"QA\"){\r",
					"    pm.environment.set(\"baseURL\",\"https://restful-booker.herokuapp.com\");\r",
					"} \r",
					"else if(env == \"DEV\"){\r",
					"    pm.environment.set(\"baseURL\",\"https://dev.restful-booker.herokuapp.com\");\r",
					"}\r",
					"else if(env == \"STAGE\"){\r",
					"    pm.environment.set(\"baseURL\",\"https://stage.restful-booker.herokuapp.com\");\r",
					"}\r",
					"\r",
					"\r",
					"/** Reading data from external JSON file */\r",
					"const reservedKeys = ['requestData']; \r",
					"Object.keys(pm.variables.toObject()).forEach(key => { \r",
					"    if (!reservedKeys.includes(key)) { \r",
					"        pm.variables.unset(key); \r",
					"    }\r",
					"});\r",
					"\r",
					"if (typeof pm.variables.get('requestData') !== 'object') {\r",
					"    pm.variables.set('requestData', pm.iterationData.toObject());\r",
					"}\r",
					"\r",
					"const requestData = pm.variables.get('requestData');\r",
					"\r",
					"if (typeof requestData !== 'object' || Object.keys(requestData).length === 0) {\r",
					"    console.log('No external data provided/data set is empty');\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentRequest = requestData.requests.find(({ name }) => name === pm.info.requestName);\r",
					"\r",
					"if (!currentRequest) {\r",
					"    console.log(`Request ${pm.info.requestName} has no data.`);\r",
					"    return;\r",
					"}\r",
					"\r",
					"if (currentRequest && currentRequest.data && currentRequest.data.length > 0) {\r",
					"    console.log(\"Size of current request data set = \" + currentRequest.data.length);\r",
					"    const currentDataSet = currentRequest.data.shift(); // get and remove first test case\r",
					"\r",
					"    if (currentDataSet) {\r",
					"        Object.entries(currentDataSet).forEach(([key, value]) => {\r",
					"            pm.variables.set(key, value);\r",
					"        });\r",
					"\r",
					"        // Store updated requestData with remaining tests\r",
					"        pm.collectionVariables.set(\"requestData\", JSON.stringify(requestData));\r",
					"\r",
					"        // Re-run same request with next data in next iteration\r",
					"        if (currentRequest.data.length > 0) {\r",
					"            pm.execution.setNextRequest(pm.info.requestName);\r",
					"        }\r",
					"    } else {\r",
					"        console.error('No variables found for this request.');\r",
					"    }\r",
					"}\r",
					"\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "6fdb6a33-672e-4704-9f8b-0e72e27a0808",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"/* To-do List: \r",
					"1) code refactor --> util functions and response validations\r",
					"*/\r",
					"\r",
					"setTimeout(() => {}, 1000);\r",
					"const scenarioName = pm.variables.get(\"scenarioName\");\r",
					"const expStatusCode = pm.variables.get(\"statusCode\");\r",
					"const expStatusLine = pm.variables.get(\"statusLine\");\r",
					"const expMessage = pm.variables.get(\"message\");\r",
					"\r",
					"//Response Validation Functions\r",
					"responseValidation = {\r",
					"    \r",
					"//NEGATIVE TEST VALIDATION\r",
					"\r",
					"    //1. Status\r",
					"    validateStatusCode_Negative: function (/*expStatusCode, scenarioName*/) {\r",
					"        pm.test(`Validate ${scenarioName} - Status code is ${expStatusCode}`, function () {\r",
					"            pm.response.to.have.status(expStatusCode);\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //2. Status Line\r",
					"    validateStatusLine_Negative: function () {\r",
					"        pm.test(`Validate ${scenarioName} - Status message is ${expStatusLine}`, function () {\r",
					"            pm.response.to.have.status(expStatusLine);\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //3. Scenario specific Tests\r",
					"    validateResponseHeaderContentType_text: function () {\r",
					"        pm.test(`Validate ${scenarioName} - Validate Response Header Text ContentType`, function () {\r",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');\r",
					"        });\r",
					"    },\r",
					"\r",
					"//POSITIVE TEST VALIDATION\r",
					"\r",
					"    //1a. Status_200\r",
					"    validateStatusCode_200: function (/*expStatusCode, scenarioName*/) {\r",
					"        pm.test(\"Status code is 200\", function () {\r",
					"            pm.response.to.have.status(200);\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //1b. Status_201\r",
					"    validateStatusCode_201: function (/*expStatusCode, scenarioName*/) {\r",
					"        pm.test(\"Status code is 201\", function () {\r",
					"            pm.response.to.have.status(201);\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //1c. Status_204\r",
					"    validateStatusCode_204: function (/*expStatusCode, scenarioName*/) {\r",
					"        pm.test(\"Status code is 204\", function () {\r",
					"            pm.response.to.have.status(204);\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //2a. Status Line_OK\r",
					"    validateStatusLine_OK: function () {\r",
					"        pm.test(\"Status message is OK\", function () {\r",
					"            pm.response.to.have.status(\"OK\");\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //2b. Status Line_Created\r",
					"    validateStatusLine_Created: function () {\r",
					"        pm.test(\"Status message is Created\", function () {\r",
					"            pm.response.to.have.status(\"Created\");\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //2c. Status Line_No Content\r",
					"    validateStatusLine_NoContent: function () {\r",
					"        pm.test(\"Status message is No Content\", function () {\r",
					"            pm.response.to.have.status(\"No Content\");\r",
					"        });\r",
					"    },\r",
					"\r",
					"    //3. Test for Content-Type header having a particular value\r",
					"    validateResponseHeaderContentType_json: function () {\r",
					"        pm.test(\"Content-Type header is application/json\", () => {\r",
					"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
					"        });\r",
					"    }    \r",
					"};\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					"\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "requestData",
			"value": ""
		},
		{
			"key": "totalCountBeforeBooking",
			"value": ""
		}
	]
}