{
	"info": {
		"_postman_id": "8ae0a803-84e5-450a-a9f8-3d14f1d9be78",
		"name": "Booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19273618"
	},
	"item": [
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"console.log(response.token)\r",
							"pm.collectionVariables.set(\"token\", response.token)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"{{username}}\",\n    \"password\" : \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/auth",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAllBookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4. Schema Validation \r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"//SET TOTAL COUNT\r",
							"console.log(response.length)\r",
							"const totalCountBeforeBooking = response.length;\r",
							"pm.collectionVariables.set(\"totalCountBeforeBooking\", totalCountBeforeBooking)\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/booking",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.booking.firstname;\r",
							"var lastname = response.booking.lastname;\r",
							"var totalprice = response.booking.totalprice;\r",
							"var depositpaid = response.booking.depositpaid;\r",
							"var checkin = response.booking.bookingdates.checkin;\r",
							"var checkout = response.booking.bookingdates.checkout;\r",
							"var additionalneeds = response.booking.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 201\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is Created\", function () {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"    \"title\": \"Generated schema for Root\",\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"        },\r",
							"        \"booking\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"firstname\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"lastname\": {\r",
							"            \"type\": \"string\"\r",
							"            },\r",
							"            \"totalprice\": {\r",
							"            \"type\": \"number\"\r",
							"            },\r",
							"            \"depositpaid\": {\r",
							"            \"type\": \"boolean\"\r",
							"            },\r",
							"            \"bookingdates\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"                \"checkin\": {\r",
							"                \"type\": \"string\"\r",
							"                },\r",
							"                \"checkout\": {\r",
							"                \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"checkin\",\r",
							"                \"checkout\"\r",
							"            ]\r",
							"            },\r",
							"            \"additionalneeds\": {\r",
							"            \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"required\": [\r",
							"            \"firstname\",\r",
							"            \"lastname\",\r",
							"            \"totalprice\",\r",
							"            \"depositpaid\",\r",
							"            \"bookingdates\",\r",
							"            \"additionalneeds\"\r",
							"        ]\r",
							"        }\r",
							"    },\r",
							"    \"required\": [\r",
							"        \"bookingid\",\r",
							"        \"booking\"\r",
							"    ]\r",
							"    }\r",
							"\r",
							"    pm.test(\"Validate Schema\"),function(){\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"\r",
							"    //5. Request VS Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get the raw request body and Parse it to JSON\r",
							"        const rawRequestBody = pm.request.body.raw;\r",
							"        const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"        pm.expect(requestBody.firstname).to.eql(firstname);\r",
							"        pm.expect(requestBody.lastname).to.eql(lastname);\r",
							"        pm.expect(requestBody.totalprice).to.eql(totalprice);\r",
							"        pm.expect(requestBody.depositpaid).to.eql(depositpaid);\r",
							"        pm.expect(requestBody.bookingdates.checkin).to.eql(checkin);\r",
							"        pm.expect(requestBody.bookingdates.checkout).to.eql(checkout);\r",
							"        pm.expect(requestBody.additionalneeds).to.eql(additionalneeds);\r",
							"    });\r",
							"\r",
							"    //6. GET ALL BOOKING COUNT AFTER BOOKING CREATION\r",
							"    pm.test(\"Check Total Booking Count increased by 1\", function () {\r",
							"        \r",
							"        // Perform GET request for All Bookings\r",
							"        pm.sendRequest({\r",
							"            url: pm.environment.get(\"baseURL\")+'/booking',  \r",
							"            method: 'GET',\r",
							"            header: {\r",
							"               'Content-Type': 'application/json'\r",
							"            }\r",
							"        }, function (err, res) {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return;\r",
							"            } else {\r",
							"               \r",
							"                const bookings = res.json(); \r",
							"                const count = bookings.length; \r",
							"                \r",
							"                    pm.expect(bookings).to.include(bookingID);\r",
							"                    //console.log(\"Total count BEFORE creating booking = \" + pm.collectionVariables.get(\"totalCountBeforeBooking\"))                    \r",
							"                    //console.log(\"Total count AFTER creating booking = \" + count)\r",
							"                    pm.expect(count).to.equal((pm.collectionVariables.get(\"totalCountBeforeBooking\"))+1);                 \r",
							"            }\r",
							"        });\r",
							"    });\r",
							"\r",
							"\r",
							"    //Set bookingId at collection level\r",
							"    const bookingID = response.bookingid\r",
							"    pm.collectionVariables.set(\"bookingId\", bookingID)\r",
							"\r",
							"    //SET VALUE AT RUN TIME\r",
							"    const booking = {\r",
							"        \"firstname\": firstname,\r",
							"        \"lastname\": lastname,\r",
							"        \"totalprice\": totalprice,\r",
							"        \"depositpaid\": depositpaid,\r",
							"        \"checkin\": checkin,\r",
							"        \"checkout\": checkout,\r",
							"        \"additionalneeds\": additionalneeds\r",
							"    }\r",
							"\r",
							"    pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jimm\",\r\n    \"lastname\" : \"Brownn\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2020-04-23\",\r\n        \"checkout\" : \"2025-05-01\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": [
				{
					"name": "GetBookingsById Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Lunch\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://restful-booker.herokuapp.com/booking",
							"protocol": "https",
							"host": [
								"restful-booker",
								"herokuapp",
								"com"
							],
							"path": [
								"booking"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Server",
							"value": "Cowboy"
						},
						{
							"key": "Report-To",
							"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1745214449&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=m0thS7E7srD5L3A%2FJiQ%2FWsqVKY3mESpcr8RznBRzs7g%3D\"}]}"
						},
						{
							"key": "Reporting-Endpoints",
							"value": "heroku-nel=https://nel.heroku.com/reports?ts=1745214449&sid=c46efe9b-d3d2-4a0c-8c76-bfafa16c5add&s=m0thS7E7srD5L3A%2FJiQ%2FWsqVKY3mESpcr8RznBRzs7g%3D"
						},
						{
							"key": "Nel",
							"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "193"
						},
						{
							"key": "Etag",
							"value": "W/\"c1-K2M63WRnYEAUIY0qaLXQtZYTNI8\""
						},
						{
							"key": "Date",
							"value": "Mon, 21 Apr 2025 05:47:29 GMT"
						},
						{
							"key": "Via",
							"value": "1.1 vegur"
						}
					],
					"cookie": [],
					"body": "{\n    \"bookingid\": 3255,\n    \"booking\": {\n        \"firstname\": \"Jim\",\n        \"lastname\": \"Brown\",\n        \"totalprice\": 111,\n        \"depositpaid\": true,\n        \"bookingdates\": {\n            \"checkin\": \"2018-01-01\",\n            \"checkout\": \"2019-01-01\"\n        },\n        \"additionalneeds\": \"Lunch\"\n    }\n}"
				}
			]
		},
		{
			"name": "GetBookingById",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const resposne = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"\r",
							"//5. Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get Booking object from POST call from Collection Variable\r",
							"        const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"        \r",
							"        //Compare POST call response with GET call response\r",
							"        pm.expect(booking.firstname).to.eql(resposne.firstname);\r",
							"        pm.expect(booking.lastname).to.eql(resposne.lastname);\r",
							"        pm.expect(booking.totalprice).to.eql(resposne.totalprice);\r",
							"        pm.expect(booking.depositpaid).to.eql(resposne.depositpaid);\r",
							"        pm.expect(booking.checkin).to.eql(resposne.bookingdates.checkin);\r",
							"        pm.expect(booking.checkout).to.eql(resposne.bookingdates.checkout);\r",
							"        pm.expect(booking.additionalneeds).to.eql(resposne.additionalneeds);\r",
							"    });"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId}}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetExistingBookingsByCheck-inTime",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get Booking object from POST call from Collection Variable\r",
							"const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"pm.variables.set(\"checkin\", booking.checkin);\r",
							"console.log(pm.variables.get(\"checkin\"))\r",
							"pm.variables.set(\"checkout\", booking.checkout);\r",
							"console.log(pm.variables.get(\"checkout\"))\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"const responseSize = response.length;\r",
							"console.log(responseSize);\r",
							"\r",
							"const checkinDate = pm.variables.get(\"checkin\")\r",
							"const checkoutDate = pm.variables.get(\"checkout\")\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"if(responseSize > 0){\r",
							"\r",
							"    //Fetch all the BookingIds from the response array\r",
							"    const BookingIds = response.map((issue) => issue.bookingid)\r",
							"\r",
							"    for (const e of BookingIds){ \r",
							"        \r",
							"        pm.test(`BookingId ${e} is within ${checkinDate} and ${checkoutDate}`, function () {\r",
							"\r",
							"            // Perform GET request for a Given Booking Id\r",
							"            pm.sendRequest({\r",
							"                url: pm.environment.get(\"baseURL\")+'/booking/'+e,  \r",
							"                method: 'GET',\r",
							"                header: {\r",
							"                'Content-Type': 'application/json'\r",
							"                }\r",
							"            }, function (err, res) {\r",
							"                if (err) {\r",
							"                    console.log(err);\r",
							"                    return;\r",
							"                } else {\r",
							"                \r",
							"                    const booking = res.json();                     \r",
							"                         pm.expect(booking.bookingdates.checkin).to.be.greaterThanOrEqual(checkinDate);               \r",
							"                         pm.expect(booking.bookingdates.checkout).to.be.lessThanOrEqual(checkoutDate);               \r",
							"\r",
							"                }\r",
							"            });\r",
							"               \r",
							"        });       \r",
							"\r",
							"    }\r",
							"\r",
							"    \r",
							"\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking?checkin={{checkin}}&checkout={{checkout}}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}"
						},
						{
							"key": "checkout",
							"value": "{{checkout}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"var firstname = response.firstname;\r",
							"var lastname = response.lastname;\r",
							"var totalprice = response.totalprice;\r",
							"var depositpaid = response.depositpaid;\r",
							"var checkin = response.bookingdates.checkin;\r",
							"var checkout = response.bookingdates.checkout;\r",
							"var additionalneeds = response.additionalneeds;\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"    //1. Status\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"    //2. Status Line\r",
							"    pm.test(\"Status message is OK\", function () {\r",
							"        pm.response.to.have.status(\"OK\");\r",
							"    });\r",
							"\r",
							"    //3. Test for Content-Type header having a particular value\r",
							"    pm.test(\"Content-Type header is application/json\", () => {\r",
							"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"    });\r",
							"\r",
							"    //4. Schema Validation \r",
							"    const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"firstname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"lastname\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"totalprice\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"depositpaid\": {\r",
							"      \"type\": \"boolean\"\r",
							"    },\r",
							"    \"bookingdates\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"checkin\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"checkout\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"checkin\",\r",
							"        \"checkout\"\r",
							"      ]\r",
							"    },\r",
							"    \"additionalneeds\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"firstname\",\r",
							"    \"lastname\",\r",
							"    \"totalprice\",\r",
							"    \"depositpaid\",\r",
							"    \"bookingdates\",\r",
							"    \"additionalneeds\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"    pm.test(\"Validate Schema\"),function(){\r",
							"        pm.response.to.have.jsonSchema(schema);\r",
							"    }\r",
							"\r",
							"    //5. Request VS Response Body Validation\r",
							"    pm.test(\"Booking details in Request and Response matches\", function () {\r",
							"\r",
							"        // Get the raw request body and Parse it to JSON\r",
							"        const rawRequestBody = pm.request.body.raw;\r",
							"        const requestBody = JSON.parse(rawRequestBody);\r",
							"\r",
							"        pm.expect(requestBody.firstname).to.eql(firstname);\r",
							"        pm.expect(requestBody.lastname).to.eql(lastname);\r",
							"        pm.expect(requestBody.totalprice).to.eql(totalprice);\r",
							"        pm.expect(requestBody.depositpaid).to.eql(depositpaid);\r",
							"        pm.expect(requestBody.bookingdates.checkin).to.eql(checkin);\r",
							"        pm.expect(requestBody.bookingdates.checkout).to.eql(checkout);\r",
							"        pm.expect(requestBody.additionalneeds).to.eql(additionalneeds);\r",
							"    });\r",
							"\r",
							"    \r",
							"\r",
							"    //Set Updated Booking Object\r",
							"        // Get Booking object from POST call from Collection Variable\r",
							"        const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"\r",
							"        booking.firstname = firstname;\r",
							"        booking.lastname = lastname;\r",
							"        booking.totalprice = totalprice;\r",
							"        booking.depositpaid = depositpaid;\r",
							"        booking.checkin = checkin;\r",
							"        booking.checkout = checkout;\r",
							"        booking.additionalneeds = additionalneeds;\r",
							"    \r",
							"        //Set updated Booking details at Collection Level Again\r",
							"        pm.collectionVariables.set(\"booking\", JSON.stringify(booking));\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jimupdate\",\r\n    \"lastname\" : \"update\",\r\n    \"totalprice\" : 100,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-02-01\"\r\n    },\r\n    \"additionalneeds\" : \"Dinner\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/booking/{{bookingId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingByName",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const booking = JSON.parse(pm.collectionVariables.get(\"booking\"));\r",
							"pm.variables.set(\"bookingFirstName\",booking.firstname)\r",
							"pm.variables.set(\"bookingLastName\",booking.lastname)\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"\r",
							"//POSITIVE TEST VALIDATION\r",
							"//1. Status\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2. Status Line\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"//3. Test for Content-Type header having a particular value\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});\r",
							"\r",
							"//4 Schema Validation\r",
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"array\",\r",
							"  \"items\": {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"      \"bookingid\": {\r",
							"        \"type\": \"number\"\r",
							"      }\r",
							"    },\r",
							"    \"required\": [\r",
							"      \"bookingid\"\r",
							"    ]\r",
							"  }\r",
							"}\r",
							"\r",
							"pm.test(\"Validate Schema\"),function(){\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Check if bookingid is matches\", function () {\r",
							"    pm.expect(response[0].bookingid).to.eql(pm.collectionVariables.get(\"bookingId\"));\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking?firstname={{bookingFirstName}}&lastname={{bookingLastName}}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{bookingFirstName}}"
						},
						{
							"key": "lastname",
							"value": "{{bookingLastName}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Jimupdate\",\r\n    \"lastname\" : \"Partial2\",\r\n    \"totalprice\" : 150\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId}}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking/{{bookingId}}",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "BookingAPI",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bookingId",
			"value": ""
		},
		{
			"key": "totalCountBeforeBooking",
			"value": ""
		},
		{
			"key": "booking",
			"value": ""
		},
		{
			"key": "bookingFirstName",
			"value": ""
		},
		{
			"key": "bookingLastName",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		}
	]
}